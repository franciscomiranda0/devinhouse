{"ast":null,"code":"import { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { processType } from './processType';\nimport ProcessService from '../../services/ProcessService';\n\nfunction* loadProcesses() {\n  const response = yield call(ProcessService.readProcesses);\n  yield put({\n    type: processType.ASYNC_LOAD,\n    payload: response.data\n  });\n}\n\nfunction* watchLoadProcesses() {\n  yield takeEvery(processType.ASYNC_LOAD_ALL, loadProcesses);\n}\n\nfunction* insertProcess(action) {\n  yield call(ProcessService.createProcess, action.payload.process);\n}\n\nfunction* watchInsertProcess() {\n  yield takeEvery(processType.ASYNC_INSERT, insertProcess);\n}\n\nfunction* updateProcess(action) {\n  yield call(ProcessService.updateProcess, action.payload.process);\n}\n\nfunction* watchUpdateProcess() {\n  yield takeEvery(processType.ASYNC_UPDATE, updateProcess);\n}\n\nfunction* deleteProcess(action) {\n  yield call(ProcessService.deleteProcess, action.payload.processId);\n}\n\nfunction* watchDeleteProcess() {\n  yield takeEvery(processType.ASYNC_DELETE, deleteProcess);\n}\n\nfunction* loadOne(action) {\n  console.log(action);\n  const response = yield call(ProcessService.readProcess, action.payload.processEntryId);\n  yield put({\n    type: processType.LOAD_ONE,\n    payload: response.data\n  });\n}\n\nfunction* watchLoadOne() {\n  yield takeEvery(processType.ASYNC_LOAD_ONE, loadOne);\n}\n\nexport default function* rootProcessSaga() {\n  yield all([watchLoadProcesses(), watchInsertProcess(), watchUpdateProcess(), watchDeleteProcess(), watchLoadOne()]);\n}","map":{"version":3,"sources":["C:/Users/Francisco/Documents/Files/DEVinHouse/Week6/dihprojeto02/src/redux/process/processSaga.js"],"names":["all","call","put","takeEvery","processType","ProcessService","loadProcesses","response","readProcesses","type","ASYNC_LOAD","payload","data","watchLoadProcesses","ASYNC_LOAD_ALL","insertProcess","action","createProcess","process","watchInsertProcess","ASYNC_INSERT","updateProcess","watchUpdateProcess","ASYNC_UPDATE","deleteProcess","processId","watchDeleteProcess","ASYNC_DELETE","loadOne","console","log","readProcess","processEntryId","LOAD_ONE","watchLoadOne","ASYNC_LOAD_ONE","rootProcessSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,cAAP,MAA2B,+BAA3B;;AAEA,UAAUC,aAAV,GAA0B;AACtB,QAAMC,QAAQ,GAAG,MAAMN,IAAI,CAACI,cAAc,CAACG,aAAhB,CAA3B;AACA,QAAMN,GAAG,CAAC;AAAEO,IAAAA,IAAI,EAAEL,WAAW,CAACM,UAApB;AAAgCC,IAAAA,OAAO,EAAEJ,QAAQ,CAACK;AAAlD,GAAD,CAAT;AACH;;AAED,UAAUC,kBAAV,GAA+B;AAC3B,QAAMV,SAAS,CAACC,WAAW,CAACU,cAAb,EAA6BR,aAA7B,CAAf;AACH;;AAED,UAAUS,aAAV,CAAwBC,MAAxB,EAAgC;AAC5B,QAAMf,IAAI,CAACI,cAAc,CAACY,aAAhB,EAA+BD,MAAM,CAACL,OAAP,CAAeO,OAA9C,CAAV;AACH;;AAED,UAAUC,kBAAV,GAA+B;AAC3B,QAAMhB,SAAS,CAACC,WAAW,CAACgB,YAAb,EAA2BL,aAA3B,CAAf;AACH;;AAED,UAAUM,aAAV,CAAwBL,MAAxB,EAAgC;AAC5B,QAAMf,IAAI,CAACI,cAAc,CAACgB,aAAhB,EAA+BL,MAAM,CAACL,OAAP,CAAeO,OAA9C,CAAV;AACH;;AAED,UAAUI,kBAAV,GAA+B;AAC3B,QAAMnB,SAAS,CAACC,WAAW,CAACmB,YAAb,EAA2BF,aAA3B,CAAf;AACH;;AAED,UAAUG,aAAV,CAAwBR,MAAxB,EAAgC;AAC5B,QAAMf,IAAI,CAACI,cAAc,CAACmB,aAAhB,EAA+BR,MAAM,CAACL,OAAP,CAAec,SAA9C,CAAV;AACH;;AAED,UAAUC,kBAAV,GAA+B;AAC3B,QAAMvB,SAAS,CAACC,WAAW,CAACuB,YAAb,EAA2BH,aAA3B,CAAf;AACH;;AAED,UAAUI,OAAV,CAAkBZ,MAAlB,EAA0B;AACtBa,EAAAA,OAAO,CAACC,GAAR,CAAYd,MAAZ;AACA,QAAMT,QAAQ,GAAG,MAAMN,IAAI,CAACI,cAAc,CAAC0B,WAAhB,EAA6Bf,MAAM,CAACL,OAAP,CAAeqB,cAA5C,CAA3B;AACA,QAAM9B,GAAG,CAAC;AAAEO,IAAAA,IAAI,EAAEL,WAAW,CAAC6B,QAApB;AAA8BtB,IAAAA,OAAO,EAAEJ,QAAQ,CAACK;AAAhD,GAAD,CAAT;AACH;;AAED,UAAUsB,YAAV,GAAyB;AACrB,QAAM/B,SAAS,CAACC,WAAW,CAAC+B,cAAb,EAA6BP,OAA7B,CAAf;AACH;;AAED,eAAe,UAAUQ,eAAV,GAA4B;AACvC,QAAMpC,GAAG,CAAC,CACNa,kBAAkB,EADZ,EAENM,kBAAkB,EAFZ,EAGNG,kBAAkB,EAHZ,EAINI,kBAAkB,EAJZ,EAKNQ,YAAY,EALN,CAAD,CAAT;AAOH","sourcesContent":["import { all, call, put, takeEvery } from 'redux-saga/effects';\r\nimport { processType } from './processType';\r\nimport ProcessService from '../../services/ProcessService';\r\n\r\nfunction* loadProcesses() {\r\n    const response = yield call(ProcessService.readProcesses);\r\n    yield put({ type: processType.ASYNC_LOAD, payload: response.data });\r\n}\r\n\r\nfunction* watchLoadProcesses() {\r\n    yield takeEvery(processType.ASYNC_LOAD_ALL, loadProcesses);\r\n}\r\n\r\nfunction* insertProcess(action) {\r\n    yield call(ProcessService.createProcess, action.payload.process);\r\n}\r\n\r\nfunction* watchInsertProcess() {\r\n    yield takeEvery(processType.ASYNC_INSERT, insertProcess);\r\n}\r\n\r\nfunction* updateProcess(action) {\r\n    yield call(ProcessService.updateProcess, action.payload.process);\r\n}\r\n\r\nfunction* watchUpdateProcess() {\r\n    yield takeEvery(processType.ASYNC_UPDATE, updateProcess);\r\n}\r\n\r\nfunction* deleteProcess(action) {\r\n    yield call(ProcessService.deleteProcess, action.payload.processId);\r\n}\r\n\r\nfunction* watchDeleteProcess() {\r\n    yield takeEvery(processType.ASYNC_DELETE, deleteProcess);\r\n}\r\n\r\nfunction* loadOne(action) {\r\n    console.log(action);\r\n    const response = yield call(ProcessService.readProcess, action.payload.processEntryId);\r\n    yield put({ type: processType.LOAD_ONE, payload: response.data });\r\n}\r\n\r\nfunction* watchLoadOne() {\r\n    yield takeEvery(processType.ASYNC_LOAD_ONE, loadOne);\r\n}\r\n\r\nexport default function* rootProcessSaga() {\r\n    yield all([\r\n        watchLoadProcesses(),\r\n        watchInsertProcess(),\r\n        watchUpdateProcess(),\r\n        watchDeleteProcess(),\r\n        watchLoadOne()\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}