{"ast":null,"code":"import ProcessService from '../../services/ProcessService';\nimport { processType } from './processType';\nimport { EMPTY_PROCESS, INITIAL_STATE } from '../../utils/constants';\nexport function processReducer(state = INITIAL_STATE, action) {\n  console.log('processRed', state, action);\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case processType.HANDLE_SAVE:\n      handleSave(ProcessService, state);\n      break;\n\n    case processType.HANDLE_PROPERTY_CHANGE:\n      handlePropertyChange(state, payload);\n      break;\n\n    case processType.HANDLE_CONCERNS_CHANGE:\n      handleConcernsChange(state, payload);\n      break;\n\n    case processType.HANDLE_CONCERNS_ADDITION:\n      handleConcernsAddition(state);\n      break;\n\n    case processType.HANDLE_LOAD:\n      return { ...state,\n        processList: payload\n      };\n\n    case processType.ASYNC_INSERT:\n      return { ...state,\n        process: EMPTY_PROCESS\n      };\n  }\n\n  return state;\n}\n\nconst handleConcernsAddition = state => {\n  state.process.processConcerns.push(state.newProcessConcerned);\n};\n\nconst handleConcernsChange = (state, payload) => {\n  state.newProcessConcerned = payload.value;\n};\n\nconst handlePropertyChange = (state, payload) => {\n  state.process = { ...state.process,\n    [payload.property]: payload.value\n  };\n};\n\nconst handleSave = (processService, state) => {\n  processService.createProcess(state.process).then(response => console.log(response)).catch(err => console.error(err));\n};","map":{"version":3,"sources":["C:/Users/Francisco/Documents/Files/DEVinHouse/Week6/dihprojeto02/src/redux/process/processReducer.js"],"names":["ProcessService","processType","EMPTY_PROCESS","INITIAL_STATE","processReducer","state","action","console","log","type","payload","HANDLE_SAVE","handleSave","HANDLE_PROPERTY_CHANGE","handlePropertyChange","HANDLE_CONCERNS_CHANGE","handleConcernsChange","HANDLE_CONCERNS_ADDITION","handleConcernsAddition","HANDLE_LOAD","processList","ASYNC_INSERT","process","processConcerns","push","newProcessConcerned","value","property","processService","createProcess","then","response","catch","err","error"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,+BAA3B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,uBAA7C;AAEA,OAAO,SAASC,cAAT,CAAwBC,KAAK,GAAGF,aAAhC,EAA+CG,MAA/C,EAAuD;AAC1DC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,KAA1B,EAAiCC,MAAjC;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBJ,MAA1B;;AACA,UAAQG,IAAR;AACI,SAAKR,WAAW,CAACU,WAAjB;AACIC,MAAAA,UAAU,CAACZ,cAAD,EAAiBK,KAAjB,CAAV;AACA;;AACJ,SAAKJ,WAAW,CAACY,sBAAjB;AACIC,MAAAA,oBAAoB,CAACT,KAAD,EAAQK,OAAR,CAApB;AACA;;AACJ,SAAKT,WAAW,CAACc,sBAAjB;AACIC,MAAAA,oBAAoB,CAACX,KAAD,EAAQK,OAAR,CAApB;AACA;;AACJ,SAAKT,WAAW,CAACgB,wBAAjB;AACIC,MAAAA,sBAAsB,CAACb,KAAD,CAAtB;AACA;;AACJ,SAAKJ,WAAW,CAACkB,WAAjB;AACI,aAAO,EACH,GAAGd,KADA;AAEHe,QAAAA,WAAW,EAAEV;AAFV,OAAP;;AAIJ,SAAKT,WAAW,CAACoB,YAAjB;AACI,aAAO,EACH,GAAGhB,KADA;AAEHiB,QAAAA,OAAO,EAAEpB;AAFN,OAAP;AAnBR;;AAwBA,SAAOG,KAAP;AACH;;AAED,MAAMa,sBAAsB,GAAIb,KAAD,IAAW;AACtCA,EAAAA,KAAK,CAACiB,OAAN,CAAcC,eAAd,CACKC,IADL,CACUnB,KAAK,CAACoB,mBADhB;AAEH,CAHD;;AAKA,MAAMT,oBAAoB,GAAG,CAACX,KAAD,EAAQK,OAAR,KAAoB;AAC7CL,EAAAA,KAAK,CAACoB,mBAAN,GAA4Bf,OAAO,CAACgB,KAApC;AACH,CAFD;;AAIA,MAAMZ,oBAAoB,GAAG,CAACT,KAAD,EAAQK,OAAR,KAAoB;AAC7CL,EAAAA,KAAK,CAACiB,OAAN,GAAgB,EACZ,GAAGjB,KAAK,CAACiB,OADG;AAEZ,KAACZ,OAAO,CAACiB,QAAT,GAAoBjB,OAAO,CAACgB;AAFhB,GAAhB;AAIH,CALD;;AAOA,MAAMd,UAAU,GAAG,CAACgB,cAAD,EAAiBvB,KAAjB,KAA2B;AAC1CuB,EAAAA,cAAc,CACTC,aADL,CACmBxB,KAAK,CAACiB,OADzB,EAEKQ,IAFL,CAEUC,QAAQ,IAAIxB,OAAO,CAACC,GAAR,CAAYuB,QAAZ,CAFtB,EAGKC,KAHL,CAGWC,GAAG,IAAI1B,OAAO,CAAC2B,KAAR,CAAcD,GAAd,CAHlB;AAIH,CALD","sourcesContent":["import ProcessService from '../../services/ProcessService';\r\nimport { processType } from './processType';\r\nimport { EMPTY_PROCESS, INITIAL_STATE } from '../../utils/constants';\r\n\r\nexport function processReducer(state = INITIAL_STATE, action) {\r\n    console.log('processRed', state, action);\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case processType.HANDLE_SAVE:\r\n            handleSave(ProcessService, state);\r\n            break;\r\n        case processType.HANDLE_PROPERTY_CHANGE:\r\n            handlePropertyChange(state, payload);\r\n            break;\r\n        case processType.HANDLE_CONCERNS_CHANGE:\r\n            handleConcernsChange(state, payload);\r\n            break;\r\n        case processType.HANDLE_CONCERNS_ADDITION:\r\n            handleConcernsAddition(state);\r\n            break;\r\n        case processType.HANDLE_LOAD:\r\n            return {\r\n                ...state,\r\n                processList: payload\r\n            }\r\n        case processType.ASYNC_INSERT:\r\n            return {\r\n                ...state,\r\n                process: EMPTY_PROCESS\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\nconst handleConcernsAddition = (state) => {\r\n    state.process.processConcerns\r\n        .push(state.newProcessConcerned);\r\n}\r\n\r\nconst handleConcernsChange = (state, payload) => {\r\n    state.newProcessConcerned = payload.value;\r\n}\r\n\r\nconst handlePropertyChange = (state, payload) => {\r\n    state.process = {\r\n        ...state.process,\r\n        [payload.property]: payload.value\r\n    };\r\n}\r\n\r\nconst handleSave = (processService, state) => {\r\n    processService\r\n        .createProcess(state.process)\r\n        .then(response => console.log(response))\r\n        .catch(err => console.error(err));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}