{"ast":null,"code":"import { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { processType } from './processType';\nimport ProcessService from '../../services/ProcessService';\n\nfunction* loadProcesses() {\n  const response = yield call(ProcessService.readProcesses);\n  yield put({\n    type: processType.HANDLE_LOAD,\n    payload: response.data\n  });\n}\n\nfunction* watchLoadProcesses() {\n  yield takeEvery(processType.HANDLE_LOAD_SAGA, loadProcesses);\n}\n\nfunction* insertProcess(action) {\n  yield call(ProcessService.createProcess(action.payload.process));\n}\n\nfunction* watchInsertProcess() {\n  const response = yield takeEvery(processType.ASYNC_INSERT, insertProcess);\n  console.log('eu', response); // yield put({ type: processType.ASYNC_INSERT });\n}\n\nfunction* updateProcess(action) {\n  yield call(ProcessService.updateProcess(action.payload.process));\n}\n\nfunction* watchUpdateProcess() {\n  yield takeEvery(processType.ASYNC_UPDATE, updateProcess);\n}\n\nexport default function* rootProcessSaga() {\n  yield all([watchLoadProcesses(), watchInsertProcess(), watchUpdateProcess()]);\n}","map":{"version":3,"sources":["C:/Users/Francisco/Documents/Files/DEVinHouse/Week6/dihprojeto02/src/redux/process/processSaga.js"],"names":["all","call","put","takeEvery","processType","ProcessService","loadProcesses","response","readProcesses","type","HANDLE_LOAD","payload","data","watchLoadProcesses","HANDLE_LOAD_SAGA","insertProcess","action","createProcess","process","watchInsertProcess","ASYNC_INSERT","console","log","updateProcess","watchUpdateProcess","ASYNC_UPDATE","rootProcessSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,cAAP,MAA2B,+BAA3B;;AAEA,UAAUC,aAAV,GAA0B;AACtB,QAAMC,QAAQ,GAAG,MAAMN,IAAI,CAACI,cAAc,CAACG,aAAhB,CAA3B;AACA,QAAMN,GAAG,CAAC;AAAEO,IAAAA,IAAI,EAAEL,WAAW,CAACM,WAApB;AAAiCC,IAAAA,OAAO,EAAEJ,QAAQ,CAACK;AAAnD,GAAD,CAAT;AACH;;AAED,UAAUC,kBAAV,GAA+B;AAC3B,QAAMV,SAAS,CAACC,WAAW,CAACU,gBAAb,EAA+BR,aAA/B,CAAf;AACH;;AAED,UAAUS,aAAV,CAAwBC,MAAxB,EAAgC;AAC5B,QAAMf,IAAI,CAACI,cAAc,CAACY,aAAf,CAA6BD,MAAM,CAACL,OAAP,CAAeO,OAA5C,CAAD,CAAV;AACH;;AAED,UAAUC,kBAAV,GAA+B;AAC3B,QAAMZ,QAAQ,GAAG,MAAMJ,SAAS,CAACC,WAAW,CAACgB,YAAb,EAA2BL,aAA3B,CAAhC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBf,QAAlB,EAF2B,CAG3B;AACH;;AAED,UAAUgB,aAAV,CAAwBP,MAAxB,EAAgC;AAC5B,QAAMf,IAAI,CAACI,cAAc,CAACkB,aAAf,CAA6BP,MAAM,CAACL,OAAP,CAAeO,OAA5C,CAAD,CAAV;AACH;;AAED,UAAUM,kBAAV,GAA+B;AAC3B,QAAMrB,SAAS,CAACC,WAAW,CAACqB,YAAb,EAA2BF,aAA3B,CAAf;AACH;;AAED,eAAe,UAAUG,eAAV,GAA4B;AACvC,QAAM1B,GAAG,CAAC,CACNa,kBAAkB,EADZ,EAENM,kBAAkB,EAFZ,EAGNK,kBAAkB,EAHZ,CAAD,CAAT;AAKH","sourcesContent":["import { all, call, put, takeEvery } from 'redux-saga/effects';\r\nimport { processType } from './processType';\r\nimport ProcessService from '../../services/ProcessService';\r\n\r\nfunction* loadProcesses() {\r\n    const response = yield call(ProcessService.readProcesses);\r\n    yield put({ type: processType.HANDLE_LOAD, payload: response.data });\r\n}\r\n\r\nfunction* watchLoadProcesses() {\r\n    yield takeEvery(processType.HANDLE_LOAD_SAGA, loadProcesses);\r\n}\r\n\r\nfunction* insertProcess(action) {\r\n    yield call(ProcessService.createProcess(action.payload.process));\r\n}\r\n\r\nfunction* watchInsertProcess() {\r\n    const response = yield takeEvery(processType.ASYNC_INSERT, insertProcess);\r\n    console.log('eu', response);\r\n    // yield put({ type: processType.ASYNC_INSERT });\r\n}\r\n\r\nfunction* updateProcess(action) {\r\n    yield call(ProcessService.updateProcess(action.payload.process));\r\n}\r\n\r\nfunction* watchUpdateProcess() {\r\n    yield takeEvery(processType.ASYNC_UPDATE, updateProcess);\r\n}\r\n\r\nexport default function* rootProcessSaga() {\r\n    yield all([\r\n        watchLoadProcesses(),\r\n        watchInsertProcess(),\r\n        watchUpdateProcess()\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}