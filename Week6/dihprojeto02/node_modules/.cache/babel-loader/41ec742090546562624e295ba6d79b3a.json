{"ast":null,"code":"import { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { processType } from './processType';\nimport ProcessService from '../../services/ProcessService';\n\nfunction* loadProcesses() {\n  const response = yield call(ProcessService.readProcesses);\n  yield put({\n    type: processType.HANDLE_LOAD,\n    payload: response.data\n  });\n}\n\nfunction* watchLoadProcesses() {\n  yield takeEvery(processType.HANDLE_LOAD_SAGA, loadProcesses);\n}\n\nfunction* saveProcess(action) {\n  yield call(ProcessService.createProcess(action.payload.process));\n}\n\nfunction* watchSaveProcess() {\n  yield takeEvery(processType.ASYNC_INSERT, saveProcess);\n}\n\nexport default function* rootProcessSaga() {\n  yield all([watchLoadProcesses(), watchSaveProcess()]);\n}","map":{"version":3,"sources":["C:/Users/Francisco/Documents/Files/DEVinHouse/Week6/dihprojeto02/src/redux/process/processSaga.js"],"names":["all","call","put","takeEvery","processType","ProcessService","loadProcesses","response","readProcesses","type","HANDLE_LOAD","payload","data","watchLoadProcesses","HANDLE_LOAD_SAGA","saveProcess","action","createProcess","process","watchSaveProcess","ASYNC_INSERT","rootProcessSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,cAAP,MAA2B,+BAA3B;;AAEA,UAAUC,aAAV,GAA0B;AACtB,QAAMC,QAAQ,GAAG,MAAMN,IAAI,CAACI,cAAc,CAACG,aAAhB,CAA3B;AACA,QAAMN,GAAG,CAAC;AAAEO,IAAAA,IAAI,EAAEL,WAAW,CAACM,WAApB;AAAiCC,IAAAA,OAAO,EAAEJ,QAAQ,CAACK;AAAnD,GAAD,CAAT;AACH;;AAED,UAAUC,kBAAV,GAA+B;AAC3B,QAAMV,SAAS,CAACC,WAAW,CAACU,gBAAb,EAA+BR,aAA/B,CAAf;AACH;;AAED,UAAUS,WAAV,CAAsBC,MAAtB,EAA8B;AAC1B,QAAMf,IAAI,CAACI,cAAc,CAACY,aAAf,CAA6BD,MAAM,CAACL,OAAP,CAAeO,OAA5C,CAAD,CAAV;AACH;;AAED,UAAUC,gBAAV,GAA6B;AACzB,QAAMhB,SAAS,CAACC,WAAW,CAACgB,YAAb,EAA2BL,WAA3B,CAAf;AACH;;AAED,eAAe,UAAUM,eAAV,GAA4B;AACvC,QAAMrB,GAAG,CAAC,CACNa,kBAAkB,EADZ,EAENM,gBAAgB,EAFV,CAAD,CAAT;AAIH","sourcesContent":["import { all, call, put, takeEvery } from 'redux-saga/effects';\r\nimport { processType } from './processType';\r\nimport ProcessService from '../../services/ProcessService';\r\n\r\nfunction* loadProcesses() {\r\n    const response = yield call(ProcessService.readProcesses);\r\n    yield put({ type: processType.HANDLE_LOAD, payload: response.data });\r\n}\r\n\r\nfunction* watchLoadProcesses() {\r\n    yield takeEvery(processType.HANDLE_LOAD_SAGA, loadProcesses);\r\n}\r\n\r\nfunction* saveProcess(action) {\r\n    yield call(ProcessService.createProcess(action.payload.process));\r\n}\r\n\r\nfunction* watchSaveProcess() {\r\n    yield takeEvery(processType.ASYNC_INSERT, saveProcess);\r\n}\r\n\r\nexport default function* rootProcessSaga() {\r\n    yield all([\r\n        watchLoadProcesses(),\r\n        watchSaveProcess()\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}