{"ast":null,"code":"import { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { processType } from './processType';\nimport ProcessService from '../../services/ProcessService';\n\nfunction* deleteProcess(action) {\n  yield call(ProcessService.deleteProcess, action.payload.processId);\n}\n\n;\n\nfunction* insertProcess(action) {\n  yield call(ProcessService.createProcess, action.payload.process);\n}\n\n;\n\nfunction* loadOne(action) {\n  const response = yield call(ProcessService.readProcess, action.payload.processEntryId);\n  yield put({\n    type: processType.LOAD_ONE,\n    payload: response\n  });\n}\n\n;\n\nfunction* loadProcesses() {\n  const response = yield call(ProcessService.readProcesses);\n  yield put({\n    type: processType.ASYNC_LOAD,\n    payload: response.data\n  });\n}\n\n;\n\nfunction* updateProcess(action) {\n  yield call(ProcessService.updateProcess, action.payload.process);\n}\n\n;\n\nfunction* watchDeleteProcess() {\n  yield takeEvery(processType.ASYNC_DELETE, deleteProcess);\n}\n\n;\n\nfunction* watchInsertProcess() {\n  yield takeEvery(processType.ASYNC_INSERT, insertProcess);\n}\n\n;\n\nfunction* watchLoadOne() {\n  yield takeEvery(processType.ASYNC_LOAD_ONE, loadOne);\n}\n\n;\n\nfunction* watchLoadProcesses() {\n  yield takeEvery(processType.ASYNC_LOAD_ALL, loadProcesses);\n}\n\n;\n\nfunction* watchUpdateProcess() {\n  yield takeEvery(processType.ASYNC_UPDATE, updateProcess);\n}\n\n;\nexport default function* rootProcessSaga() {\n  yield all([watchLoadProcesses(), watchInsertProcess(), watchUpdateProcess(), watchDeleteProcess(), watchLoadOne()]);\n}\n;","map":{"version":3,"sources":["C:/Users/Francisco/Documents/Files/DEVinHouse/Week6/dihprojeto02/src/redux/process/processSaga.js"],"names":["all","call","put","takeEvery","processType","ProcessService","deleteProcess","action","payload","processId","insertProcess","createProcess","process","loadOne","response","readProcess","processEntryId","type","LOAD_ONE","loadProcesses","readProcesses","ASYNC_LOAD","data","updateProcess","watchDeleteProcess","ASYNC_DELETE","watchInsertProcess","ASYNC_INSERT","watchLoadOne","ASYNC_LOAD_ONE","watchLoadProcesses","ASYNC_LOAD_ALL","watchUpdateProcess","ASYNC_UPDATE","rootProcessSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,cAAP,MAA2B,+BAA3B;;AAEA,UAAUC,aAAV,CAAwBC,MAAxB,EAAgC;AAC5B,QAAMN,IAAI,CAACI,cAAc,CAACC,aAAhB,EAA+BC,MAAM,CAACC,OAAP,CAAeC,SAA9C,CAAV;AACH;;AAAA;;AAED,UAAUC,aAAV,CAAwBH,MAAxB,EAAgC;AAC5B,QAAMN,IAAI,CAACI,cAAc,CAACM,aAAhB,EAA+BJ,MAAM,CAACC,OAAP,CAAeI,OAA9C,CAAV;AACH;;AAAA;;AAED,UAAUC,OAAV,CAAkBN,MAAlB,EAA0B;AACtB,QAAMO,QAAQ,GAAG,MAAMb,IAAI,CAACI,cAAc,CAACU,WAAhB,EAA6BR,MAAM,CAACC,OAAP,CAAeQ,cAA5C,CAA3B;AACA,QAAMd,GAAG,CAAC;AAAEe,IAAAA,IAAI,EAAEb,WAAW,CAACc,QAApB;AAA8BV,IAAAA,OAAO,EAAEM;AAAvC,GAAD,CAAT;AACH;;AAAA;;AAED,UAAUK,aAAV,GAA0B;AACtB,QAAML,QAAQ,GAAG,MAAMb,IAAI,CAACI,cAAc,CAACe,aAAhB,CAA3B;AACA,QAAMlB,GAAG,CAAC;AAAEe,IAAAA,IAAI,EAAEb,WAAW,CAACiB,UAApB;AAAgCb,IAAAA,OAAO,EAAEM,QAAQ,CAACQ;AAAlD,GAAD,CAAT;AACH;;AAAA;;AAGD,UAAUC,aAAV,CAAwBhB,MAAxB,EAAgC;AAC5B,QAAMN,IAAI,CAACI,cAAc,CAACkB,aAAhB,EAA+BhB,MAAM,CAACC,OAAP,CAAeI,OAA9C,CAAV;AACH;;AAAA;;AAGD,UAAUY,kBAAV,GAA+B;AAC3B,QAAMrB,SAAS,CAACC,WAAW,CAACqB,YAAb,EAA2BnB,aAA3B,CAAf;AACH;;AAAA;;AAED,UAAUoB,kBAAV,GAA+B;AAC3B,QAAMvB,SAAS,CAACC,WAAW,CAACuB,YAAb,EAA2BjB,aAA3B,CAAf;AACH;;AAAA;;AAED,UAAUkB,YAAV,GAAyB;AACrB,QAAMzB,SAAS,CAACC,WAAW,CAACyB,cAAb,EAA6BhB,OAA7B,CAAf;AACH;;AAAA;;AAED,UAAUiB,kBAAV,GAA+B;AAC3B,QAAM3B,SAAS,CAACC,WAAW,CAAC2B,cAAb,EAA6BZ,aAA7B,CAAf;AACH;;AAAA;;AAED,UAAUa,kBAAV,GAA+B;AAC3B,QAAM7B,SAAS,CAACC,WAAW,CAAC6B,YAAb,EAA2BV,aAA3B,CAAf;AACH;;AAAA;AAED,eAAe,UAAUW,eAAV,GAA4B;AACvC,QAAMlC,GAAG,CAAC,CACN8B,kBAAkB,EADZ,EAENJ,kBAAkB,EAFZ,EAGNM,kBAAkB,EAHZ,EAINR,kBAAkB,EAJZ,EAKNI,YAAY,EALN,CAAD,CAAT;AAOH;AAAA","sourcesContent":["import { all, call, put, takeEvery } from 'redux-saga/effects';\r\nimport { processType } from './processType';\r\nimport ProcessService from '../../services/ProcessService';\r\n\r\nfunction* deleteProcess(action) {\r\n    yield call(ProcessService.deleteProcess, action.payload.processId);\r\n};\r\n\r\nfunction* insertProcess(action) {\r\n    yield call(ProcessService.createProcess, action.payload.process);\r\n};\r\n\r\nfunction* loadOne(action) {\r\n    const response = yield call(ProcessService.readProcess, action.payload.processEntryId);\r\n    yield put({ type: processType.LOAD_ONE, payload: response });\r\n};\r\n\r\nfunction* loadProcesses() {\r\n    const response = yield call(ProcessService.readProcesses);\r\n    yield put({ type: processType.ASYNC_LOAD, payload: response.data });\r\n};\r\n\r\n\r\nfunction* updateProcess(action) {\r\n    yield call(ProcessService.updateProcess, action.payload.process);\r\n};\r\n\r\n\r\nfunction* watchDeleteProcess() {\r\n    yield takeEvery(processType.ASYNC_DELETE, deleteProcess);\r\n};\r\n\r\nfunction* watchInsertProcess() {\r\n    yield takeEvery(processType.ASYNC_INSERT, insertProcess);\r\n};\r\n\r\nfunction* watchLoadOne() {\r\n    yield takeEvery(processType.ASYNC_LOAD_ONE, loadOne);\r\n};\r\n\r\nfunction* watchLoadProcesses() {\r\n    yield takeEvery(processType.ASYNC_LOAD_ALL, loadProcesses);\r\n};\r\n\r\nfunction* watchUpdateProcess() {\r\n    yield takeEvery(processType.ASYNC_UPDATE, updateProcess);\r\n};\r\n\r\nexport default function* rootProcessSaga() {\r\n    yield all([\r\n        watchLoadProcesses(),\r\n        watchInsertProcess(),\r\n        watchUpdateProcess(),\r\n        watchDeleteProcess(),\r\n        watchLoadOne()\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}